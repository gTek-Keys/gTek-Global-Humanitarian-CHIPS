# gTek Global Cyber Databank - Red Hat OpenShift CI/CD Pipeline
# IEEE compliant deployment automation

name: gTek Databank Deployment Pipeline

on:
  push:
    branches: [main, develop]
    paths: ['databank/**']
  pull_request:
    branches: [main]
    paths: ['databank/**']

env:
  REGISTRY: quay.io
  IMAGE_NAME: gtek/databank
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './databank'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Security audit for Node.js
        run: |
          cd databank
          npm audit --audit-level high

  compliance-check:
    name: IEEE/Red Hat Compliance Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate configuration schema
        run: |
          # Install yq for YAML validation
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          
          # Validate YAML configuration
          yq eval '.version' databank/gtek-databank-config.yaml
          yq eval '.security_policies.enforce_2fa' databank/gtek-databank-config.yaml

      - name: Check SQL schema compliance
        run: |
          # Validate PostgreSQL schema
          docker run --rm -v $(pwd)/databank/supabase:/sql postgres:15 \
            psql -h localhost -U postgres -d postgres -f /sql/security-audit-schema.sql --dry-run || true

      - name: Red Hat UBI compliance check
        run: |
          echo "Verifying Red Hat Universal Base Image compliance..."
          # Check for Red Hat certified base images in containers
          grep -r "registry.access.redhat.com\|registry.redhat.io" databank/ || echo "Consider using Red Hat UBI images"

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [security-scan, compliance-check]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd databank
          npm ci

      - name: Run tests
        run: |
          cd databank
          npm test

      - name: Build Docker image
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:${{ github.sha }} databank/

      - name: Test container security
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/tmp aquasec/trivy image $REGISTRY/$IMAGE_NAME:${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: "4.12"

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          namespace: gtek-databank-staging

      - name: Deploy to staging
        run: |
          oc apply -f databank/openshift/staging/
          oc rollout status deployment/gtek-databank-app -n gtek-databank-staging

      - name: Run staging tests
        run: |
          # Wait for deployment
          sleep 30
          # Run integration tests against staging
          npm run test:integration -- --baseUrl=https://databank-staging.gtek.global

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: "4.12"

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          namespace: gtek-databank-production

      - name: Deploy to production
        run: |
          # Apply production configurations
          oc apply -f databank/openshift/production/
          
          # Rolling update with zero downtime
          oc patch deployment gtek-databank-app -p '{"spec":{"template":{"metadata":{"annotations":{"deployment.kubernetes.io/revision":"'"$(date +%s)"'"}}}}}'
          
          # Wait for rollout
          oc rollout status deployment/gtek-databank-app -n gtek-databank-production --timeout=600s

      - name: Health check
        run: |
          # Verify deployment health
          curl -f https://databank.gtek.global/health || exit 1

      - name: Update Supabase
        run: |
          # Deploy database migrations to production Supabase
          npx supabase db push --project-ref ${{ secrets.SUPABASE_PROJECT_REF_PROD }}

      - name: Notify compliance team
        run: |
          # Send deployment notification
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H 'Content-type: application/json' \
            --data '{"text":"ðŸš€ gTek Databank deployed to production - Version: ${{ github.sha }}"}'

  audit-deployment:
    name: Post-Deployment Audit
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Security compliance check
        run: |
          # Verify HTTPS/TLS configuration
          curl -I https://databank.gtek.global | grep "HTTP/2 200"
          
          # Check security headers
          curl -I https://databank.gtek.global | grep "Strict-Transport-Security"
          
          # Verify certificate validity
          echo | openssl s_client -servername databank.gtek.global -connect databank.gtek.global:443 2>/dev/null | openssl x509 -noout -dates

      - name: Log deployment to audit trail
        run: |
          # Create deployment audit record
          curl -X POST https://databank.gtek.global/api/audit/deployment \
            -H "Authorization: Bearer ${{ secrets.AUDIT_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "actor_email": "github-actions@gtek.global",
              "action": "PRODUCTION_DEPLOYMENT",
              "resource_type": "SYSTEM",
              "metadata": {
                "commit_sha": "${{ github.sha }}",
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
                "pipeline_run": "${{ github.run_id }}"
              }
            }'

      - name: Generate compliance report
        run: |
          echo "## Deployment Compliance Report" > deployment-report.md
          echo "- **Deployment Time**: $(date -u)" >> deployment-report.md
          echo "- **Commit SHA**: ${{ github.sha }}" >> deployment-report.md
          echo "- **Security Scan**: âœ… Passed" >> deployment-report.md
          echo "- **Compliance Check**: âœ… Passed" >> deployment-report.md
          echo "- **Production Health**: âœ… Verified" >> deployment-report.md

      - name: Archive compliance artifacts
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report-${{ github.sha }}
          path: deployment-report.md
          retention-days: 2555  # 7 years retention