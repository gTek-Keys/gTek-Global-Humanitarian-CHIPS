name: CI/CD - Docker Build & Deploy

on:
  push:
    branches:
      - "main"
      - "develop"
  pull_request:
    branches:
      - "main"
  release:
    types: [published]

env:
  REGISTRY_DOCKER: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME_MAIN: gtek-humanitarian-chips
  IMAGE_NAME_DATABANK: gtek-databank

jobs:
  # Build and push main platform container
  build-main-platform:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ vars.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}
          
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKER }}/${{ vars.DOCKER_USER }}/${{ env.IMAGE_NAME_MAIN }}
            ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_MAIN }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            
      - name: Build and push main platform
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  # Build and push databank container
  build-databank:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ vars.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}
          
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata for databank
        id: meta-databank
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKER }}/${{ vars.DOCKER_USER }}/${{ env.IMAGE_NAME_DATABANK }}
            ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_DATABANK }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            
      - name: Build and push databank
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./databank/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-databank.outputs.tags }}
          labels: ${{ steps.meta-databank.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Google Cloud Run (production)
  deploy-cloud-run:
    needs: [build-main-platform]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        
      - name: Configure Docker for GCR
        run: gcloud auth configure-docker
        
      - name: Build and push to GCR
        run: |
          docker build -t gcr.io/${{ vars.GCP_PROJECT_ID }}/gtek-app .
          docker push gcr.io/${{ vars.GCP_PROJECT_ID }}/gtek-app
          
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy gtek-app \
            --image gcr.io/${{ vars.GCP_PROJECT_ID }}/gtek-app \
            --region ${{ vars.GCP_REGION || 'us-central1' }} \
            --platform managed \
            --allow-unauthenticated \
            --port 3000 \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10 \
            --set-env-vars NODE_ENV=production

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-main-platform]
    if: github.event_name != 'pull_request'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_DOCKER }}/${{ vars.DOCKER_USER }}/${{ env.IMAGE_NAME_MAIN }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Notify on success/failure
  notify:
    runs-on: ubuntu-latest
    needs: [build-main-platform, build-databank, deploy-cloud-run]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.build-main-platform.result }}" == "success" && "${{ needs.build-databank.result }}" == "success" ]]; then
            echo "‚úÖ gTek CHIPS deployment successful!"
            echo "üê≥ Docker images published to Docker Hub and GHCR"
            echo "‚òÅÔ∏è Cloud Run deployment: ${{ needs.deploy-cloud-run.result }}"
          else
            echo "‚ùå Deployment failed - check logs for details"
            exit 1
          fi